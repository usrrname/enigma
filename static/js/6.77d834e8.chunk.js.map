{"version":3,"sources":["../node_modules/react-bootstrap/esm/ToggleButton.js","components/soundToggle.tsx"],"names":["noop","ToggleButton","React","forwardRef","_ref","ref","children","name","className","checked","type","onChange","value","disabled","inputRef","props","_objectWithoutPropertiesLoose","_useState","useState","focused","setFocused","handleFocus","useCallback","e","target","tagName","handleBlur","createElement","Button","_extends","classNames","active","as","autoComplete","onFocus","onBlur","displayName","SoundToggle","useEffect","isPlaying","isChecked","size"],"mappings":"0OAMIA,EAAO,aAEPC,EAAeC,IAAMC,YAAW,SAAUC,EAAMC,GAClD,IAAIC,EAAWF,EAAKE,SAChBC,EAAOH,EAAKG,KACZC,EAAYJ,EAAKI,UACjBC,EAAUL,EAAKK,QACfC,EAAON,EAAKM,KACZC,EAAWP,EAAKO,SAChBC,EAAQR,EAAKQ,MACbC,EAAWT,EAAKS,SAChBC,EAAWV,EAAKU,SAChBC,EAAQC,YAA8BZ,EAAM,CAAC,WAAY,OAAQ,YAAa,UAAW,OAAQ,WAAY,QAAS,WAAY,aAElIa,EAAYC,oBAAS,GACrBC,EAAUF,EAAU,GACpBG,EAAaH,EAAU,GAEvBI,EAAcC,uBAAY,SAAUC,GACb,UAArBA,EAAEC,OAAOC,SAAqBL,GAAW,KAC5C,IACCM,EAAaJ,uBAAY,SAAUC,GACZ,UAArBA,EAAEC,OAAOC,SAAqBL,GAAW,KAC5C,IACH,OAAoBlB,IAAMyB,cAAcC,IAAQC,YAAS,GAAId,EAAO,CAClEV,IAAKA,EACLG,UAAWsB,IAAWtB,EAAWW,GAAW,QAASN,GAAY,YACjEH,KAAM,KACNqB,SAAUtB,EACVuB,GAAI,UACW9B,IAAMyB,cAAc,QAAS,CAC5CpB,KAAMA,EACNG,KAAMA,EACNE,MAAOA,EACPP,IAAKS,EACLmB,aAAc,MACdxB,UAAWA,EACXI,WAAYA,EACZqB,QAASb,EACTc,OAAQT,EACRf,SAAUA,GAAYX,IACpBM,MAENL,EAAamC,YAAc,eACZnC,QCnCFoC,EAAc,SAACtB,GAI1B,OAHAuB,qBAAU,cAEP,CAACvB,EAAMwB,UAAWxB,EAAMyB,YAEzB,0BAAMhC,UAAU,gBACbO,EAAMyB,WAAazB,EAAMwB,UAAY,2BAAO/B,UAAU,aAAjB,YAAgD,4CACtF,kBAAC,EAAD,CACEuB,OAAQhB,EAAMwB,UACd9B,QAASM,EAAMyB,UACf9B,KAAK,WACL+B,KAAK,KACL7B,MAAM,GACND,SAAUI,EAAMJ","file":"static/js/6.77d834e8.chunk.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport classNames from 'classnames';\nimport React, { useState, useCallback } from 'react';\nimport Button from './Button';\n\nvar noop = function noop() {};\n\nvar ToggleButton = React.forwardRef(function (_ref, ref) {\n  var children = _ref.children,\n      name = _ref.name,\n      className = _ref.className,\n      checked = _ref.checked,\n      type = _ref.type,\n      onChange = _ref.onChange,\n      value = _ref.value,\n      disabled = _ref.disabled,\n      inputRef = _ref.inputRef,\n      props = _objectWithoutPropertiesLoose(_ref, [\"children\", \"name\", \"className\", \"checked\", \"type\", \"onChange\", \"value\", \"disabled\", \"inputRef\"]);\n\n  var _useState = useState(false),\n      focused = _useState[0],\n      setFocused = _useState[1];\n\n  var handleFocus = useCallback(function (e) {\n    if (e.target.tagName === 'INPUT') setFocused(true);\n  }, []);\n  var handleBlur = useCallback(function (e) {\n    if (e.target.tagName === 'INPUT') setFocused(false);\n  }, []);\n  return /*#__PURE__*/React.createElement(Button, _extends({}, props, {\n    ref: ref,\n    className: classNames(className, focused && 'focus', disabled && 'disabled'),\n    type: null,\n    active: !!checked,\n    as: \"label\"\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    name: name,\n    type: type,\n    value: value,\n    ref: inputRef,\n    autoComplete: \"off\",\n    checked: !!checked,\n    disabled: !!disabled,\n    onFocus: handleFocus,\n    onBlur: handleBlur,\n    onChange: onChange || noop\n  }), children);\n});\nToggleButton.displayName = 'ToggleButton';\nexport default ToggleButton;","import React, { useEffect } from 'react';\n\nimport { ToggleButton } from 'react-bootstrap';\nimport { PlayFunction } from 'use-sound/dist/types';\n\ntype ComponentProps = {\n  play: PlayFunction,\n  pause: (id?: string) => void;\n  isPlaying: boolean;\n  isChecked: boolean;\n  onChange: (event: any) => void;\n}\n\ntype Props = ComponentProps;\n\nexport const SoundToggle = (props: Props) => {\n  useEffect(() => {\n\n  }, [props.isPlaying, props.isChecked])\n  return (\n    <span className=\"sound-toggle\">\n      {props.isChecked && props.isPlaying ? <label className=\"ml-2 mr-2\">Sound On</label> : <label>Sound Off</label>}\n      <ToggleButton\n        active={props.isPlaying}\n        checked={props.isChecked}\n        type=\"checkbox\"\n        size=\"sm\"\n        value=''\n        onChange={props.onChange}\n      />\n    </span>\n  );\n}"],"sourceRoot":""}